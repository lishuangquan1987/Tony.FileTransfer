// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/fileupload.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tony.FileTransfer.Server {
  public static partial class IFileUpload
  {
    static readonly string __ServiceName = "fileupload.IFileUpload";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Tony.FileTransfer.Server.CheckFileExistRequest> __Marshaller_fileupload_CheckFileExistRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tony.FileTransfer.Server.CheckFileExistRequest.Parser));
    static readonly grpc::Marshaller<global::Tony.FileTransfer.Server.CommonResponse> __Marshaller_common_CommonResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tony.FileTransfer.Server.CommonResponse.Parser));
    static readonly grpc::Marshaller<global::Tony.FileTransfer.Server.UploadWithStreamRequest> __Marshaller_fileupload_UploadWithStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tony.FileTransfer.Server.UploadWithStreamRequest.Parser));

    static readonly grpc::Method<global::Tony.FileTransfer.Server.CheckFileExistRequest, global::Tony.FileTransfer.Server.CommonResponse> __Method_CheckFileExist = new grpc::Method<global::Tony.FileTransfer.Server.CheckFileExistRequest, global::Tony.FileTransfer.Server.CommonResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckFileExist",
        __Marshaller_fileupload_CheckFileExistRequest,
        __Marshaller_common_CommonResponse);

    static readonly grpc::Method<global::Tony.FileTransfer.Server.UploadWithStreamRequest, global::Tony.FileTransfer.Server.CommonResponse> __Method_UploadWithStream = new grpc::Method<global::Tony.FileTransfer.Server.UploadWithStreamRequest, global::Tony.FileTransfer.Server.CommonResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "UploadWithStream",
        __Marshaller_fileupload_UploadWithStreamRequest,
        __Marshaller_common_CommonResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tony.FileTransfer.Server.FileuploadReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IFileUpload</summary>
    [grpc::BindServiceMethod(typeof(IFileUpload), "BindService")]
    public abstract partial class IFileUploadBase
    {
      /// <summary>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tony.FileTransfer.Server.CommonResponse> CheckFileExist(global::Tony.FileTransfer.Server.CheckFileExistRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tony.FileTransfer.Server.CommonResponse> UploadWithStream(grpc::IAsyncStreamReader<global::Tony.FileTransfer.Server.UploadWithStreamRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(IFileUploadBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CheckFileExist, serviceImpl.CheckFileExist)
          .AddMethod(__Method_UploadWithStream, serviceImpl.UploadWithStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, IFileUploadBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CheckFileExist, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tony.FileTransfer.Server.CheckFileExistRequest, global::Tony.FileTransfer.Server.CommonResponse>(serviceImpl.CheckFileExist));
      serviceBinder.AddMethod(__Method_UploadWithStream, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Tony.FileTransfer.Server.UploadWithStreamRequest, global::Tony.FileTransfer.Server.CommonResponse>(serviceImpl.UploadWithStream));
    }

  }
}
#endregion
